package com.rpc.client; /*
 * DESCRIPTION
 *     TODO
 *
 * NOTES
 *    <other useful comments, qualifications, etc.>
 *
 * MODIFIED    (MM/DD/YY)
 *   bofan     2016/5/16 - Creation
 *
 */

import com.rpc.common.Request;
import com.rpc.common.demo.service.HelloService;
import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
import org.junit.Test;

import java.lang.reflect.Method;

public class RpcClientProxy implements MethodInterceptor {

//    private Object srcObj = null;
//    public RpcClientProxy(Object obj)
//    {
//        this.srcObj = obj;
//    }

    @SuppressWarnings("unchecked")
    public static <T> T proxyTarget(Class<?> clazz) {
        Enhancer en = new Enhancer();
        en.setSuperclass(t.getClass());
        en.setCallback(new RpcClientProxy());
        T tt = (T) en.create();
        return tt;
    }
    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {

        Request req = new Request();
        req.setRequestId(System.currentTimeMillis()+"");

        System.out.println("call " + method.getName());
//        // 1.
//        method.get
        return  null;
    }

    @Test
    public void testProxy(String[] args)
    {

        HelloService service = RpcClientProxy.proxyTarget(HelloService);
    }
}
